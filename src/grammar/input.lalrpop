
use std::string::String;
use crate::grammar::ast::{Ast, LoadableFormatData, CSVData};
use polars::datatypes::{TimeUnit, DataType};

grammar;

pub Start: Ast = {
    "load_files" <f:ScanFileNames> => Ast{ loadable_filenames: f }
};

ScanFileNames: Vec<LoadableFormatData> = {
    <v:(<FileNameData>)*> => v
};

FileNameData: LoadableFormatData = {
    "CSV" "(" "filename" "=" <f:FileNameId> ("," <g:FieldTypes>)? ")" => LoadableFormatData::CSV(CSVData{filename:<>, separator: None, field_types: g})
} 

FieldTypes:: HashMap<String, DataType> = {
    "{" ( "(" <g:String> "=" <h:DataType> ")")+ "}" => 
};

DataType: DataType = {
    "Boolean" => DataType::Boolean,
    "UInt8"   => DataType::UInt8,
    "UInt16"  => DataType::UInt16,
    "UInt32"  => DataType::UInt32,
    "UInt64"  => DataType::UInt64,
    "Int8"    => DataType::Int8,
    "Int16"   => DataType::Int16,
    "Int32"   => DataType::Int32,
    "Int64"   => DataType::Int64,
    "Float32" => DataType::Float32,
    "Float64" => DataType::Float64,
    "String"  => DataType::String,
    "Binary"  => DataType::Binary,
    "BinaryOffset" => DataType::BinaryOffset,
    "Date"         => DataType::Date,
    "Datetime" <f:TimeUnit> <g:String?> => DataType::Datetime(f, g),
    "Duration" <f:TimeUnit>             => DataType::Duration(f),
    "Time"    => DataType::Time,
    "Null"    => DataType::Null,
    "Unknown" => DataType::Unknown,
};

TimeUnit: TimeUnit = {
    "Nanoseconds" => TimeUnit::Nanoseconds,
    "Microseconds" => TimeUnit::Microseconds,
    "Milliseconds" => TimeUnit::Milliseconds,
};

String: String = {
    r#""[^"]""# => String::from(<>)
};

Usize: usize = {
    r#"[0-9]+"# => <>.parse::<usize>().unwrap()
};

FileNameId: String = {
    String => <>
};

